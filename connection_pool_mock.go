// Code generated by MockGen. DO NOT EDIT.
// Source: ./connection_pool.go
//
// Generated by this command:
//
//	mockgen -source=./connection_pool.go -destination=./connection_pool_mock.go -package=nntppool UsenetConnectionPool
//

// Package nntppool is a generated GoMock package.
package nntppool

import (
	context "context"
	io "io"
	reflect "reflect"

	nntpcli "github.com/javi11/nntpcli"
	gomock "go.uber.org/mock/gomock"
)

// MockUsenetConnectionPool is a mock of UsenetConnectionPool interface.
type MockUsenetConnectionPool struct {
	ctrl     *gomock.Controller
	recorder *MockUsenetConnectionPoolMockRecorder
	isgomock struct{}
}

// MockUsenetConnectionPoolMockRecorder is the mock recorder for MockUsenetConnectionPool.
type MockUsenetConnectionPoolMockRecorder struct {
	mock *MockUsenetConnectionPool
}

// NewMockUsenetConnectionPool creates a new mock instance.
func NewMockUsenetConnectionPool(ctrl *gomock.Controller) *MockUsenetConnectionPool {
	mock := &MockUsenetConnectionPool{ctrl: ctrl}
	mock.recorder = &MockUsenetConnectionPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsenetConnectionPool) EXPECT() *MockUsenetConnectionPoolMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockUsenetConnectionPool) Body(ctx context.Context, msgID string, w io.Writer, nntpGroups []string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", ctx, msgID, w, nntpGroups)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Body indicates an expected call of Body.
func (mr *MockUsenetConnectionPoolMockRecorder) Body(ctx, msgID, w, nntpGroups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockUsenetConnectionPool)(nil).Body), ctx, msgID, w, nntpGroups)
}

// BodyReader mocks base method.
func (m *MockUsenetConnectionPool) BodyReader(ctx context.Context, msgID string, nntpGroups []string) (nntpcli.ArticleBodyReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BodyReader", ctx, msgID, nntpGroups)
	ret0, _ := ret[0].(nntpcli.ArticleBodyReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BodyReader indicates an expected call of BodyReader.
func (mr *MockUsenetConnectionPoolMockRecorder) BodyReader(ctx, msgID, nntpGroups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BodyReader", reflect.TypeOf((*MockUsenetConnectionPool)(nil).BodyReader), ctx, msgID, nntpGroups)
}

// GetActiveMigrations mocks base method.
func (m *MockUsenetConnectionPool) GetActiveMigrations() map[string]*MigrationStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveMigrations")
	ret0, _ := ret[0].(map[string]*MigrationStatus)
	return ret0
}

// GetActiveMigrations indicates an expected call of GetActiveMigrations.
func (mr *MockUsenetConnectionPoolMockRecorder) GetActiveMigrations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveMigrations", reflect.TypeOf((*MockUsenetConnectionPool)(nil).GetActiveMigrations))
}

// GetConnection mocks base method.
func (m *MockUsenetConnectionPool) GetConnection(ctx context.Context, skipProviders []string, useBackupProviders bool) (PooledConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection", ctx, skipProviders, useBackupProviders)
	ret0, _ := ret[0].(PooledConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockUsenetConnectionPoolMockRecorder) GetConnection(ctx, skipProviders, useBackupProviders any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockUsenetConnectionPool)(nil).GetConnection), ctx, skipProviders, useBackupProviders)
}

// GetMigrationStatus mocks base method.
func (m *MockUsenetConnectionPool) GetMigrationStatus(migrationID string) (*MigrationStatus, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigrationStatus", migrationID)
	ret0, _ := ret[0].(*MigrationStatus)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetMigrationStatus indicates an expected call of GetMigrationStatus.
func (mr *MockUsenetConnectionPoolMockRecorder) GetMigrationStatus(migrationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrationStatus", reflect.TypeOf((*MockUsenetConnectionPool)(nil).GetMigrationStatus), migrationID)
}

// GetProvidersInfo mocks base method.
func (m *MockUsenetConnectionPool) GetProvidersInfo() []ProviderInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvidersInfo")
	ret0, _ := ret[0].([]ProviderInfo)
	return ret0
}

// GetProvidersInfo indicates an expected call of GetProvidersInfo.
func (mr *MockUsenetConnectionPoolMockRecorder) GetProvidersInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvidersInfo", reflect.TypeOf((*MockUsenetConnectionPool)(nil).GetProvidersInfo))
}

// Post mocks base method.
func (m *MockUsenetConnectionPool) Post(ctx context.Context, r io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockUsenetConnectionPoolMockRecorder) Post(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockUsenetConnectionPool)(nil).Post), ctx, r)
}

// Quit mocks base method.
func (m *MockUsenetConnectionPool) Quit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Quit")
}

// Quit indicates an expected call of Quit.
func (mr *MockUsenetConnectionPoolMockRecorder) Quit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*MockUsenetConnectionPool)(nil).Quit))
}

// Stat mocks base method.
func (m *MockUsenetConnectionPool) Stat(ctx context.Context, msgID string, nntpGroups []string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", ctx, msgID, nntpGroups)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockUsenetConnectionPoolMockRecorder) Stat(ctx, msgID, nntpGroups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockUsenetConnectionPool)(nil).Stat), ctx, msgID, nntpGroups)
}

// UpdateConfiguration mocks base method.
func (m *MockUsenetConnectionPool) UpdateConfiguration(arg0 ...Config) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfiguration", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfiguration indicates an expected call of UpdateConfiguration.
func (mr *MockUsenetConnectionPoolMockRecorder) UpdateConfiguration(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguration", reflect.TypeOf((*MockUsenetConnectionPool)(nil).UpdateConfiguration), arg0...)
}
