// Code generated by MockGen. DO NOT EDIT.
// Source: ./nntp.go
//
// Generated by this command:
//
//	mockgen -source=./nntp.go -destination=./nntp_mock.go -package=nntpcli Client
//

// Package nntpcli is a generated GoMock package.
package nntpcli

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Dial mocks base method.
func (m *MockClient) Dial(ctx context.Context, host string, port int, config ...DialConfig) (Connection, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, host, port}
	for _, a := range config {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Dial", varargs...)
	ret0, _ := ret[0].(Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockClientMockRecorder) Dial(ctx, host, port any, config ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, host, port}, config...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockClient)(nil).Dial), varargs...)
}

// DialTLS mocks base method.
func (m *MockClient) DialTLS(ctx context.Context, host string, port int, insecureSSL bool, config ...DialConfig) (Connection, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, host, port, insecureSSL}
	for _, a := range config {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DialTLS", varargs...)
	ret0, _ := ret[0].(Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialTLS indicates an expected call of DialTLS.
func (mr *MockClientMockRecorder) DialTLS(ctx, host, port, insecureSSL any, config ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, host, port, insecureSSL}, config...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialTLS", reflect.TypeOf((*MockClient)(nil).DialTLS), varargs...)
}
